/*
 * This file is generated by jOOQ.
*/
package com.speaker.db.jooq.generated.tables;


import com.speaker.db.jooq.generated.Keys;
import com.speaker.db.jooq.generated.Speaker;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Friends extends TableImpl<Record> {

    private static final long serialVersionUID = 1098610732;

    /**
     * The reference instance of <code>speaker.friends</code>
     */
    public static final Friends FRIENDS = new Friends();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>speaker.friends.id</code>.
     */
    public final TableField<Record, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>speaker.friends.account_id</code>.
     */
    public final TableField<Record, Integer> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>speaker.friends.friend_account_id</code>.
     */
    public final TableField<Record, Integer> FRIEND_ACCOUNT_ID = createField("friend_account_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>speaker.friends</code> table reference
     */
    public Friends() {
        this("friends", null);
    }

    /**
     * Create an aliased <code>speaker.friends</code> table reference
     */
    public Friends(String alias) {
        this(alias, FRIENDS);
    }

    private Friends(String alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Friends(String alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Speaker.SPEAKER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Integer> getIdentity() {
        return Keys.IDENTITY_FRIENDS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_FRIENDS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.KEY_FRIENDS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.FK_FRIENDS_TO_ACCOUNT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Friends as(String alias) {
        return new Friends(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Friends rename(String name) {
        return new Friends(name, null);
    }
}
